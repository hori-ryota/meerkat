// Code generated by MockGen. DO NOT EDIT.
// Source: posting_service.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/opensaasstudio/meerkat/domain"
	reflect "reflect"
)

// MockPostingService is a mock of PostingService interface
type MockPostingService struct {
	ctrl     *gomock.Controller
	recorder *MockPostingServiceMockRecorder
}

// MockPostingServiceMockRecorder is the mock recorder for MockPostingService
type MockPostingServiceMockRecorder struct {
	mock *MockPostingService
}

// NewMockPostingService creates a new mock instance
func NewMockPostingService(ctrl *gomock.Controller) *MockPostingService {
	mock := &MockPostingService{ctrl: ctrl}
	mock.recorder = &MockPostingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostingService) EXPECT() *MockPostingServiceMockRecorder {
	return m.recorder
}

// PostAnswers mocks base method
func (m *MockPostingService) PostAnswers(ctx context.Context, questionnaire domain.Questionnaire, answerer domain.Answerer, answers []domain.Answer) domain.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostAnswers", ctx, questionnaire, answerer, answers)
	ret0, _ := ret[0].(domain.Error)
	return ret0
}

// PostAnswers indicates an expected call of PostAnswers
func (mr *MockPostingServiceMockRecorder) PostAnswers(ctx, questionnaire, answerer, answers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAnswers", reflect.TypeOf((*MockPostingService)(nil).PostAnswers), ctx, questionnaire, answerer, answers)
}
