// Code generated by MockGen. DO NOT EDIT.
// Source: asking_service.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/opensaasstudio/meerkat/domain"
	reflect "reflect"
	time "time"
)

// MockNotificationService is a mock of NotificationService interface
type MockNotificationService struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationServiceMockRecorder
}

// MockNotificationServiceMockRecorder is the mock recorder for MockNotificationService
type MockNotificationServiceMockRecorder struct {
	mock *MockNotificationService
}

// NewMockNotificationService creates a new mock instance
func NewMockNotificationService(ctrl *gomock.Controller) *MockNotificationService {
	mock := &MockNotificationService{ctrl: ctrl}
	mock.recorder = &MockNotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotificationService) EXPECT() *MockNotificationServiceMockRecorder {
	return m.recorder
}

// Notify mocks base method
func (m *MockNotificationService) Notify(ctx context.Context, notificationTarget domain.NotificationTarget, questionnaire domain.Questionnaire) domain.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, notificationTarget, questionnaire)
	ret0, _ := ret[0].(domain.Error)
	return ret0
}

// Notify indicates an expected call of Notify
func (mr *MockNotificationServiceMockRecorder) Notify(ctx, notificationTarget, questionnaire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockNotificationService)(nil).Notify), ctx, notificationTarget, questionnaire)
}

// MockLastExecutedRecorder is a mock of LastExecutedRecorder interface
type MockLastExecutedRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockLastExecutedRecorderMockRecorder
}

// MockLastExecutedRecorderMockRecorder is the mock recorder for MockLastExecutedRecorder
type MockLastExecutedRecorderMockRecorder struct {
	mock *MockLastExecutedRecorder
}

// NewMockLastExecutedRecorder creates a new mock instance
func NewMockLastExecutedRecorder(ctrl *gomock.Controller) *MockLastExecutedRecorder {
	mock := &MockLastExecutedRecorder{ctrl: ctrl}
	mock.recorder = &MockLastExecutedRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLastExecutedRecorder) EXPECT() *MockLastExecutedRecorderMockRecorder {
	return m.recorder
}

// RecordLastExecuted mocks base method
func (m *MockLastExecutedRecorder) RecordLastExecuted(ctx context.Context, questionnaire domain.Questionnaire, lastExecuted time.Time) domain.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordLastExecuted", ctx, questionnaire, lastExecuted)
	ret0, _ := ret[0].(domain.Error)
	return ret0
}

// RecordLastExecuted indicates an expected call of RecordLastExecuted
func (mr *MockLastExecutedRecorderMockRecorder) RecordLastExecuted(ctx, questionnaire, lastExecuted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLastExecuted", reflect.TypeOf((*MockLastExecutedRecorder)(nil).RecordLastExecuted), ctx, questionnaire, lastExecuted)
}
