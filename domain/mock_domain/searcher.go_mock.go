// Code generated by MockGen. DO NOT EDIT.
// Source: searcher.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/opensaasstudio/meerkat/domain"
	reflect "reflect"
)

// MockNotificationTargetSearcher is a mock of NotificationTargetSearcher interface
type MockNotificationTargetSearcher struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationTargetSearcherMockRecorder
}

// MockNotificationTargetSearcherMockRecorder is the mock recorder for MockNotificationTargetSearcher
type MockNotificationTargetSearcherMockRecorder struct {
	mock *MockNotificationTargetSearcher
}

// NewMockNotificationTargetSearcher creates a new mock instance
func NewMockNotificationTargetSearcher(ctrl *gomock.Controller) *MockNotificationTargetSearcher {
	mock := &MockNotificationTargetSearcher{ctrl: ctrl}
	mock.recorder = &MockNotificationTargetSearcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotificationTargetSearcher) EXPECT() *MockNotificationTargetSearcherMockRecorder {
	return m.recorder
}

// SearchByQuestionnaireIDAndAnswererID mocks base method
func (m *MockNotificationTargetSearcher) SearchByQuestionnaireIDAndAnswererID(ctx context.Context, questionnaireID domain.QuestionnaireID, answererID domain.AnswererID) ([]domain.NotificationTarget, domain.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByQuestionnaireIDAndAnswererID", ctx, questionnaireID, answererID)
	ret0, _ := ret[0].([]domain.NotificationTarget)
	ret1, _ := ret[1].(domain.Error)
	return ret0, ret1
}

// SearchByQuestionnaireIDAndAnswererID indicates an expected call of SearchByQuestionnaireIDAndAnswererID
func (mr *MockNotificationTargetSearcherMockRecorder) SearchByQuestionnaireIDAndAnswererID(ctx, questionnaireID, answererID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByQuestionnaireIDAndAnswererID", reflect.TypeOf((*MockNotificationTargetSearcher)(nil).SearchByQuestionnaireIDAndAnswererID), ctx, questionnaireID, answererID)
}

// SearchByQuestionnaireID mocks base method
func (m *MockNotificationTargetSearcher) SearchByQuestionnaireID(ctx context.Context, questionnaireID domain.QuestionnaireID) ([]domain.NotificationTarget, domain.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByQuestionnaireID", ctx, questionnaireID)
	ret0, _ := ret[0].([]domain.NotificationTarget)
	ret1, _ := ret[1].(domain.Error)
	return ret0, ret1
}

// SearchByQuestionnaireID indicates an expected call of SearchByQuestionnaireID
func (mr *MockNotificationTargetSearcherMockRecorder) SearchByQuestionnaireID(ctx, questionnaireID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByQuestionnaireID", reflect.TypeOf((*MockNotificationTargetSearcher)(nil).SearchByQuestionnaireID), ctx, questionnaireID)
}

// MockQuestionnaireSearcher is a mock of QuestionnaireSearcher interface
type MockQuestionnaireSearcher struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionnaireSearcherMockRecorder
}

// MockQuestionnaireSearcherMockRecorder is the mock recorder for MockQuestionnaireSearcher
type MockQuestionnaireSearcherMockRecorder struct {
	mock *MockQuestionnaireSearcher
}

// NewMockQuestionnaireSearcher creates a new mock instance
func NewMockQuestionnaireSearcher(ctrl *gomock.Controller) *MockQuestionnaireSearcher {
	mock := &MockQuestionnaireSearcher{ctrl: ctrl}
	mock.recorder = &MockQuestionnaireSearcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuestionnaireSearcher) EXPECT() *MockQuestionnaireSearcherMockRecorder {
	return m.recorder
}

// SearchExecutionNeeded mocks base method
func (m *MockQuestionnaireSearcher) SearchExecutionNeeded(ctx context.Context) ([]domain.Questionnaire, domain.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchExecutionNeeded", ctx)
	ret0, _ := ret[0].([]domain.Questionnaire)
	ret1, _ := ret[1].(domain.Error)
	return ret0, ret1
}

// SearchExecutionNeeded indicates an expected call of SearchExecutionNeeded
func (mr *MockQuestionnaireSearcherMockRecorder) SearchExecutionNeeded(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchExecutionNeeded", reflect.TypeOf((*MockQuestionnaireSearcher)(nil).SearchExecutionNeeded), ctx)
}

// FetchAll mocks base method
func (m *MockQuestionnaireSearcher) FetchAll(ctx context.Context) ([]domain.Questionnaire, domain.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAll", ctx)
	ret0, _ := ret[0].([]domain.Questionnaire)
	ret1, _ := ret[1].(domain.Error)
	return ret0, ret1
}

// FetchAll indicates an expected call of FetchAll
func (mr *MockQuestionnaireSearcherMockRecorder) FetchAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAll", reflect.TypeOf((*MockQuestionnaireSearcher)(nil).FetchAll), ctx)
}

// MockAnswererSearcher is a mock of AnswererSearcher interface
type MockAnswererSearcher struct {
	ctrl     *gomock.Controller
	recorder *MockAnswererSearcherMockRecorder
}

// MockAnswererSearcherMockRecorder is the mock recorder for MockAnswererSearcher
type MockAnswererSearcherMockRecorder struct {
	mock *MockAnswererSearcher
}

// NewMockAnswererSearcher creates a new mock instance
func NewMockAnswererSearcher(ctrl *gomock.Controller) *MockAnswererSearcher {
	mock := &MockAnswererSearcher{ctrl: ctrl}
	mock.recorder = &MockAnswererSearcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAnswererSearcher) EXPECT() *MockAnswererSearcherMockRecorder {
	return m.recorder
}

// FetchAll mocks base method
func (m *MockAnswererSearcher) FetchAll(ctx context.Context) ([]domain.Answerer, domain.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAll", ctx)
	ret0, _ := ret[0].([]domain.Answerer)
	ret1, _ := ret[1].(domain.Error)
	return ret0, ret1
}

// FetchAll indicates an expected call of FetchAll
func (mr *MockAnswererSearcherMockRecorder) FetchAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAll", reflect.TypeOf((*MockAnswererSearcher)(nil).FetchAll), ctx)
}
