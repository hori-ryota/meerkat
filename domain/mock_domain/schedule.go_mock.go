// Code generated by MockGen. DO NOT EDIT.
// Source: schedule.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/opensaasstudio/meerkat/domain"
	reflect "reflect"
	time "time"
)

// MockSchedule is a mock of Schedule interface
type MockSchedule struct {
	ctrl     *gomock.Controller
	recorder *MockScheduleMockRecorder
}

// MockScheduleMockRecorder is the mock recorder for MockSchedule
type MockScheduleMockRecorder struct {
	mock *MockSchedule
}

// NewMockSchedule creates a new mock instance
func NewMockSchedule(ctrl *gomock.Controller) *MockSchedule {
	mock := &MockSchedule{ctrl: ctrl}
	mock.recorder = &MockScheduleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchedule) EXPECT() *MockScheduleMockRecorder {
	return m.recorder
}

// NextTime mocks base method
func (m *MockSchedule) NextTime(baseTime time.Time) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextTime", baseTime)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// NextTime indicates an expected call of NextTime
func (mr *MockScheduleMockRecorder) NextTime(baseTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextTime", reflect.TypeOf((*MockSchedule)(nil).NextTime), baseTime)
}

// PrevTime mocks base method
func (m *MockSchedule) PrevTime(baseTime time.Time) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrevTime", baseTime)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// PrevTime indicates an expected call of PrevTime
func (mr *MockScheduleMockRecorder) PrevTime(baseTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrevTime", reflect.TypeOf((*MockSchedule)(nil).PrevTime), baseTime)
}

// Dump mocks base method
func (m *MockSchedule) Dump() domain.ScheduleValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump")
	ret0, _ := ret[0].(domain.ScheduleValue)
	return ret0
}

// Dump indicates an expected call of Dump
func (mr *MockScheduleMockRecorder) Dump() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockSchedule)(nil).Dump))
}

// ScheduleKind mocks base method
func (m *MockSchedule) ScheduleKind() domain.ScheduleKind {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleKind")
	ret0, _ := ret[0].(domain.ScheduleKind)
	return ret0
}

// ScheduleKind indicates an expected call of ScheduleKind
func (mr *MockScheduleMockRecorder) ScheduleKind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleKind", reflect.TypeOf((*MockSchedule)(nil).ScheduleKind))
}

// MockScheduleException is a mock of ScheduleException interface
type MockScheduleException struct {
	ctrl     *gomock.Controller
	recorder *MockScheduleExceptionMockRecorder
}

// MockScheduleExceptionMockRecorder is the mock recorder for MockScheduleException
type MockScheduleExceptionMockRecorder struct {
	mock *MockScheduleException
}

// NewMockScheduleException creates a new mock instance
func NewMockScheduleException(ctrl *gomock.Controller) *MockScheduleException {
	mock := &MockScheduleException{ctrl: ctrl}
	mock.recorder = &MockScheduleExceptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScheduleException) EXPECT() *MockScheduleExceptionMockRecorder {
	return m.recorder
}

// NeedsIgnore mocks base method
func (m *MockScheduleException) NeedsIgnore(arg0 time.Time) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeedsIgnore", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NeedsIgnore indicates an expected call of NeedsIgnore
func (mr *MockScheduleExceptionMockRecorder) NeedsIgnore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeedsIgnore", reflect.TypeOf((*MockScheduleException)(nil).NeedsIgnore), arg0)
}

// Dump mocks base method
func (m *MockScheduleException) Dump() domain.ScheduleExceptionValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump")
	ret0, _ := ret[0].(domain.ScheduleExceptionValue)
	return ret0
}

// Dump indicates an expected call of Dump
func (mr *MockScheduleExceptionMockRecorder) Dump() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockScheduleException)(nil).Dump))
}

// ScheduleExceptionKind mocks base method
func (m *MockScheduleException) ScheduleExceptionKind() domain.ScheduleExceptionKind {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleExceptionKind")
	ret0, _ := ret[0].(domain.ScheduleExceptionKind)
	return ret0
}

// ScheduleExceptionKind indicates an expected call of ScheduleExceptionKind
func (mr *MockScheduleExceptionMockRecorder) ScheduleExceptionKind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleExceptionKind", reflect.TypeOf((*MockScheduleException)(nil).ScheduleExceptionKind))
}
