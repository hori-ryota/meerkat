// Code generated by go-genaccessor; DO NOT EDIT.

package domain

import (
	"time"
)

func (m Admin) ID() AdminID {
	return m.id
}

func (m Admin) Name() string {
	return m.name
}

func (m *Admin) Rename(s string) {
	m.name = s
}

func (m Answer) ID() AnswerID {
	return m.id
}

func (m Answer) QuestionnaireID() QuestionnaireID {
	return m.questionnaireID
}

func (m Answer) QuestionID() QuestionID {
	return m.questionID
}

func (m Answer) AnswererID() AnswererID {
	return m.answererID
}

func (m Answer) AnsweredAt() time.Time {
	return m.answeredAt
}

func (m Answer) Value() string {
	return m.value
}

func (m *Answer) Overwrite(s string) {
	m.value = s
}

func (m Answerer) ID() AnswererID {
	return m.id
}

func (m Answerer) Name() string {
	return m.name
}

func (m *Answerer) Rename(s string) {
	m.name = s
}

func (m Answerer) NotificationTargets() []NotificationTarget {
	return m.notificationTargets
}

func (m *AskingService) OverwriteNowFunc(s func() time.Time) {
	m.nowFunc = s
}

func (m NotificationTargetBase) ID() NotificationTargetID {
	return m.id
}

func (m NotificationTargetBase) QuestionnaireID() QuestionnaireID {
	return m.questionnaireID
}

func (m NotificationTargetBase) AnswererID() AnswererID {
	return m.answererID
}

func (m NotificationTargetBase) NotificationTargetKind() NotificationTargetKind {
	return m.notificationTargetKind
}

func (m NotificationTargetSlack) ID() NotificationTargetID {
	return m.id
}

func (m NotificationTargetSlack) QuestionnaireID() QuestionnaireID {
	return m.questionnaireID
}

func (m NotificationTargetSlack) AnswererID() AnswererID {
	return m.answererID
}

func (m NotificationTargetSlack) NotificationTargetKind() NotificationTargetKind {
	return m.notificationTargetKind
}

func (m NotificationTargetSlack) ChannelID() string {
	return m.channelID
}

func (m NotificationTargetSlack) UserID() string {
	return m.userID
}

func (m NotificationTargetSlack) NeedsMention() bool {
	return m.needsMention
}

func (m *NotificationTargetSlack) ToggleNeedsMention(s bool) {
	m.needsMention = s
}

func (m PostTargetBase) ID() PostTargetID {
	return m.id
}

func (m PostTargetBase) PostTargetKind() PostTargetKind {
	return m.postTargetKind
}

func (m PostTargetSlack) ID() PostTargetID {
	return m.id
}

func (m PostTargetSlack) PostTargetKind() PostTargetKind {
	return m.postTargetKind
}

func (m PostTargetSlack) ChannelID() string {
	return m.channelID
}

func (m Question) ID() QuestionID {
	return m.id
}

func (m Question) Text() string {
	return m.text
}

func (m *Question) Overwrite(s string) {
	m.text = s
}

func (m Question) SuggestingFunc() func(currentText string) []string {
	return m.suggestingFunc
}

func (m *Question) SetSuggestingFunc(s func(currentText string) []string) {
	m.suggestingFunc = s
}

func (m Question) ValidatingFunc() func(currentText string) Error {
	return m.validatingFunc
}

func (m *Question) SetValidatingFunc(s func(currentText string) Error) {
	m.validatingFunc = s
}

func (m Questionnaire) ID() QuestionnaireID {
	return m.id
}

func (m Questionnaire) Title() string {
	return m.title
}

func (m *Questionnaire) OverwriteTitle(s string) {
	m.title = s
}

func (m Questionnaire) QuestionItems() []QuestionItem {
	return m.questionItems
}

func (m *Questionnaire) ReplaceQuestions(s []QuestionItem) {
	m.questionItems = s
}

func (m Questionnaire) Schedule() Schedule {
	return m.schedule
}

func (m *Questionnaire) SetSchedule(s Schedule) {
	m.schedule = s
}

func (m Questionnaire) PostTargets() []PostTarget {
	return m.postTargets
}

func (m *Questionnaire) SetPostTargets(s []PostTarget) {
	m.postTargets = s
}

func (m Questionnaire) LastExecuted() time.Time {
	return m.lastExecuted
}

func (m *Questionnaire) SetLastExecuted(s time.Time) {
	m.lastExecuted = s
}

func (m QuestionItem) Question() Question {
	return m.question
}

func (m QuestionItem) Required() bool {
	return m.required
}

func (m QuestionnaireTarget) ID() QuestionnaireTargetID {
	return m.id
}

func (m QuestionnaireTarget) QuestionnaireID() QuestionnaireID {
	return m.questionnaireID
}

func (m QuestionnaireTarget) TargetType() QuestionnaireTargetType {
	return m.targetType
}

func (m QuestionnaireTarget) TargetIDs() []string {
	return m.targetIDs
}

func (m *QuestionnaireTarget) SetTargetIDs(s []string) {
	m.targetIDs = s
}

func (m QuestionnaireTarget) Schedules() []Schedule {
	return m.schedules
}

func (m *QuestionnaireTarget) SetSchedules(s []Schedule) {
	m.schedules = s
}

func (m QuestionnaireTarget) ScheduleExceptions() []ScheduleException {
	return m.scheduleExceptions
}

func (m *QuestionnaireTarget) SetScheduleExceptions(s []ScheduleException) {
	m.scheduleExceptions = s
}

func (m YearMonthDayScheduleException) ScheduleExceptionKind() ScheduleExceptionKind {
	return m.scheduleExceptionKind
}

func (m YearMonthDayScheduleException) Year() uint32 {
	return m.year
}

func (m YearMonthDayScheduleException) Month() time.Month {
	return m.month
}

func (m YearMonthDayScheduleException) Day() uint32 {
	return m.day
}

func (m YearMonthDayScheduleException) LocOffset() int {
	return m.locOffset
}

func (m WeekdayAndTimeSchedule) ScheduleKind() ScheduleKind {
	return m.scheduleKind
}

func (m WeekdayAndTimeSchedule) Hour() uint32 {
	return m.hour
}

func (m WeekdayAndTimeSchedule) Minute() uint32 {
	return m.minute
}

func (m WeekdayAndTimeSchedule) Sec() uint32 {
	return m.sec
}

func (m WeekdayAndTimeSchedule) LocOffset() int {
	return m.locOffset
}

func (m WeekdayAndTimeSchedule) Mon() bool {
	return m.mon
}

func (m WeekdayAndTimeSchedule) Tue() bool {
	return m.tue
}

func (m WeekdayAndTimeSchedule) Wed() bool {
	return m.wed
}

func (m WeekdayAndTimeSchedule) Thu() bool {
	return m.thu
}

func (m WeekdayAndTimeSchedule) Fri() bool {
	return m.fri
}

func (m WeekdayAndTimeSchedule) Sat() bool {
	return m.sat
}

func (m WeekdayAndTimeSchedule) Sun() bool {
	return m.sun
}

func (m Schedules) ScheduleKind() ScheduleKind {
	return m.scheduleKind
}

func (m Schedules) Schedules() []Schedule {
	return m.schedules
}

func (m Schedules) Exceptions() []ScheduleException {
	return m.exceptions
}
