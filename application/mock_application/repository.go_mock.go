// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_application is a generated GoMock package.
package mock_application

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/opensaasstudio/meerkat/domain"
	reflect "reflect"
)

// MockQuestionnaireRepository is a mock of QuestionnaireRepository interface
type MockQuestionnaireRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionnaireRepositoryMockRecorder
}

// MockQuestionnaireRepositoryMockRecorder is the mock recorder for MockQuestionnaireRepository
type MockQuestionnaireRepositoryMockRecorder struct {
	mock *MockQuestionnaireRepository
}

// NewMockQuestionnaireRepository creates a new mock instance
func NewMockQuestionnaireRepository(ctrl *gomock.Controller) *MockQuestionnaireRepository {
	mock := &MockQuestionnaireRepository{ctrl: ctrl}
	mock.recorder = &MockQuestionnaireRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuestionnaireRepository) EXPECT() *MockQuestionnaireRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockQuestionnaireRepository) Create(ctx context.Context, questionnaire domain.Questionnaire) domain.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, questionnaire)
	ret0, _ := ret[0].(domain.Error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockQuestionnaireRepositoryMockRecorder) Create(ctx, questionnaire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockQuestionnaireRepository)(nil).Create), ctx, questionnaire)
}

// Update mocks base method
func (m *MockQuestionnaireRepository) Update(ctx context.Context, questionnaire domain.Questionnaire, version int) domain.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, questionnaire, version)
	ret0, _ := ret[0].(domain.Error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockQuestionnaireRepositoryMockRecorder) Update(ctx, questionnaire, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockQuestionnaireRepository)(nil).Update), ctx, questionnaire, version)
}

// Delete mocks base method
func (m *MockQuestionnaireRepository) Delete(ctx context.Context, questionnaire domain.Questionnaire) domain.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, questionnaire)
	ret0, _ := ret[0].(domain.Error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockQuestionnaireRepositoryMockRecorder) Delete(ctx, questionnaire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockQuestionnaireRepository)(nil).Delete), ctx, questionnaire)
}

// FindByID mocks base method
func (m *MockQuestionnaireRepository) FindByID(ctx context.Context, id domain.QuestionnaireID) (domain.Questionnaire, int, domain.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(domain.Questionnaire)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(domain.Error)
	return ret0, ret1, ret2
}

// FindByID indicates an expected call of FindByID
func (mr *MockQuestionnaireRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockQuestionnaireRepository)(nil).FindByID), ctx, id)
}

// MockAnswererRepository is a mock of AnswererRepository interface
type MockAnswererRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAnswererRepositoryMockRecorder
}

// MockAnswererRepositoryMockRecorder is the mock recorder for MockAnswererRepository
type MockAnswererRepositoryMockRecorder struct {
	mock *MockAnswererRepository
}

// NewMockAnswererRepository creates a new mock instance
func NewMockAnswererRepository(ctrl *gomock.Controller) *MockAnswererRepository {
	mock := &MockAnswererRepository{ctrl: ctrl}
	mock.recorder = &MockAnswererRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAnswererRepository) EXPECT() *MockAnswererRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAnswererRepository) Create(ctx context.Context, answerer domain.Answerer) domain.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, answerer)
	ret0, _ := ret[0].(domain.Error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAnswererRepositoryMockRecorder) Create(ctx, answerer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAnswererRepository)(nil).Create), ctx, answerer)
}

// Update mocks base method
func (m *MockAnswererRepository) Update(ctx context.Context, answerer domain.Answerer, version int) domain.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, answerer, version)
	ret0, _ := ret[0].(domain.Error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockAnswererRepositoryMockRecorder) Update(ctx, answerer, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAnswererRepository)(nil).Update), ctx, answerer, version)
}

// Delete mocks base method
func (m *MockAnswererRepository) Delete(ctx context.Context, answerer domain.Answerer) domain.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, answerer)
	ret0, _ := ret[0].(domain.Error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockAnswererRepositoryMockRecorder) Delete(ctx, answerer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAnswererRepository)(nil).Delete), ctx, answerer)
}

// FindByID mocks base method
func (m *MockAnswererRepository) FindByID(ctx context.Context, id domain.AnswererID) (domain.Answerer, int, domain.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(domain.Answerer)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(domain.Error)
	return ret0, ret1, ret2
}

// FindByID indicates an expected call of FindByID
func (mr *MockAnswererRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAnswererRepository)(nil).FindByID), ctx, id)
}

// MockNotificationTargetRepository is a mock of NotificationTargetRepository interface
type MockNotificationTargetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationTargetRepositoryMockRecorder
}

// MockNotificationTargetRepositoryMockRecorder is the mock recorder for MockNotificationTargetRepository
type MockNotificationTargetRepositoryMockRecorder struct {
	mock *MockNotificationTargetRepository
}

// NewMockNotificationTargetRepository creates a new mock instance
func NewMockNotificationTargetRepository(ctrl *gomock.Controller) *MockNotificationTargetRepository {
	mock := &MockNotificationTargetRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationTargetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotificationTargetRepository) EXPECT() *MockNotificationTargetRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockNotificationTargetRepository) Create(ctx context.Context, notificationTarget domain.NotificationTarget) domain.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, notificationTarget)
	ret0, _ := ret[0].(domain.Error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockNotificationTargetRepositoryMockRecorder) Create(ctx, notificationTarget interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationTargetRepository)(nil).Create), ctx, notificationTarget)
}

// Update mocks base method
func (m *MockNotificationTargetRepository) Update(ctx context.Context, notificationTarget domain.NotificationTarget, version int) domain.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, notificationTarget, version)
	ret0, _ := ret[0].(domain.Error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockNotificationTargetRepositoryMockRecorder) Update(ctx, notificationTarget, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNotificationTargetRepository)(nil).Update), ctx, notificationTarget, version)
}

// Delete mocks base method
func (m *MockNotificationTargetRepository) Delete(ctx context.Context, notificationTarget domain.NotificationTarget) domain.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, notificationTarget)
	ret0, _ := ret[0].(domain.Error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockNotificationTargetRepositoryMockRecorder) Delete(ctx, notificationTarget interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNotificationTargetRepository)(nil).Delete), ctx, notificationTarget)
}

// MockAnswerRepository is a mock of AnswerRepository interface
type MockAnswerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAnswerRepositoryMockRecorder
}

// MockAnswerRepositoryMockRecorder is the mock recorder for MockAnswerRepository
type MockAnswerRepositoryMockRecorder struct {
	mock *MockAnswerRepository
}

// NewMockAnswerRepository creates a new mock instance
func NewMockAnswerRepository(ctrl *gomock.Controller) *MockAnswerRepository {
	mock := &MockAnswerRepository{ctrl: ctrl}
	mock.recorder = &MockAnswerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAnswerRepository) EXPECT() *MockAnswerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAnswerRepository) Create(ctx context.Context, answer domain.Answer) domain.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, answer)
	ret0, _ := ret[0].(domain.Error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAnswerRepositoryMockRecorder) Create(ctx, answer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAnswerRepository)(nil).Create), ctx, answer)
}

// Update mocks base method
func (m *MockAnswerRepository) Update(ctx context.Context, answer domain.Answer, version int) domain.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, answer, version)
	ret0, _ := ret[0].(domain.Error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockAnswerRepositoryMockRecorder) Update(ctx, answer, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAnswerRepository)(nil).Update), ctx, answer, version)
}

// Delete mocks base method
func (m *MockAnswerRepository) Delete(ctx context.Context, answer domain.Answer) domain.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, answer)
	ret0, _ := ret[0].(domain.Error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockAnswerRepositoryMockRecorder) Delete(ctx, answer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAnswerRepository)(nil).Delete), ctx, answer)
}

// FindByID mocks base method
func (m *MockAnswerRepository) FindByID(ctx context.Context, answerID domain.AnswerID) (domain.Answer, int, domain.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, answerID)
	ret0, _ := ret[0].(domain.Answer)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(domain.Error)
	return ret0, ret1, ret2
}

// FindByID indicates an expected call of FindByID
func (mr *MockAnswerRepositoryMockRecorder) FindByID(ctx, answerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAnswerRepository)(nil).FindByID), ctx, answerID)
}
