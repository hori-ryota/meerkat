// Code generated by MockGen. DO NOT EDIT.
// Source: questionnaire_update.go

// Package mock_application is a generated GoMock package.
package mock_application

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	application "github.com/opensaasstudio/meerkat/application"
	domain "github.com/opensaasstudio/meerkat/domain"
	reflect "reflect"
)

// MockUpdatingQuestionnaireAuthorizationService is a mock of UpdatingQuestionnaireAuthorizationService interface
type MockUpdatingQuestionnaireAuthorizationService struct {
	ctrl     *gomock.Controller
	recorder *MockUpdatingQuestionnaireAuthorizationServiceMockRecorder
}

// MockUpdatingQuestionnaireAuthorizationServiceMockRecorder is the mock recorder for MockUpdatingQuestionnaireAuthorizationService
type MockUpdatingQuestionnaireAuthorizationServiceMockRecorder struct {
	mock *MockUpdatingQuestionnaireAuthorizationService
}

// NewMockUpdatingQuestionnaireAuthorizationService creates a new mock instance
func NewMockUpdatingQuestionnaireAuthorizationService(ctrl *gomock.Controller) *MockUpdatingQuestionnaireAuthorizationService {
	mock := &MockUpdatingQuestionnaireAuthorizationService{ctrl: ctrl}
	mock.recorder = &MockUpdatingQuestionnaireAuthorizationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdatingQuestionnaireAuthorizationService) EXPECT() *MockUpdatingQuestionnaireAuthorizationServiceMockRecorder {
	return m.recorder
}

// CanUpdateQuestionnaire mocks base method
func (m *MockUpdatingQuestionnaireAuthorizationService) CanUpdateQuestionnaire(ctx context.Context, questionnaire domain.Questionnaire, adminDescriptor application.AdminDescriptor, workspaceDescriptor application.WorkspaceDescriptor) (bool, domain.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanUpdateQuestionnaire", ctx, questionnaire, adminDescriptor, workspaceDescriptor)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(domain.Error)
	return ret0, ret1
}

// CanUpdateQuestionnaire indicates an expected call of CanUpdateQuestionnaire
func (mr *MockUpdatingQuestionnaireAuthorizationServiceMockRecorder) CanUpdateQuestionnaire(ctx, questionnaire, adminDescriptor, workspaceDescriptor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanUpdateQuestionnaire", reflect.TypeOf((*MockUpdatingQuestionnaireAuthorizationService)(nil).CanUpdateQuestionnaire), ctx, questionnaire, adminDescriptor, workspaceDescriptor)
}
